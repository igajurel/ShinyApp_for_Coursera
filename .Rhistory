1+1
library(datasets)
data(iris)
?iris
head(iris)
colMeans(iris$Sepal.Length)
colMeans(,iris$Sepal.Length)
colMeans(iris,iris$Sepal.Length)
iris.virginica <- iris[,iris$Species='virginica']
iris.virginica <- iris[iris$Species='virginica']
iris.virginica <- iris[iris$Species="virginica"]
iris.virginica <- iris[which(iris$Species=='virginica')]
iris.virginica <- iris[which(iris$Species=='virginica'),]
iris.virginica
mean(iris.virginica$Sepal.Length)
round(mean(iris.virginica$Sepal.Length))
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
?tapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars$cyl
unique(mtcars$cyl)
?split
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
xx<- tapply(mtcars$hp, mtcars$cyl, mean)
attr(xx)
attrs(xx)
209.21429 - 82.63636
abs(209.21429 - 82.63636)
round(abs(209.21429 - 82.63636))
debug(ls)
ls
source('C:/Users/GajjuVai/Desktop/MyWorks/DS-crs2/Week3_ProgAssign_IshanGajurel.R')
source('C:/Users/GajjuVai/Desktop/MyWorks/DS-crs2/Week3_ProgAssign_IshanGajurel.R')
Q
?debug
isdebugged(ls)
debuggingState(on=NULL)
isD
undebug(ls)
Q
source('C:/Users/GajjuVai/Desktop/MyWorks/DS-crs2/Week3_ProgAssign_IshanGajurel.R')
cachemean()
cachemean(c(2,3,4))
source('~/.active-rstudio-document')
source("IshanGajurel_ProgAssign_Week3.R")
getcwd()
getwd()
setwd("C:/Users/GajjuVai/Desktop/MyWorks/DS-crs2)
")"
exit
)
1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "ec53be2d6f2a1cb2b5ba",
secret = "fc62c0c058ba38d20495b61f786df76aed56c77d")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
?lapply
oauthorized_jleek_data$
}
?oauthorized_jleek_data
install.packages("sqldf")
library("sqldf")
library("sqldf")
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "quiz2_q2.csv")
download.file(url, f)
getwd()
acs <- data.table(read.csv(f))
acs <- data.frame(read.csv(f))
acs
head(acs)
?sqldf()
sqldf("SELECT * FROM ACS WHERE ROW=1")
sqldf("SELECT * FROM acs WHERE ROW=1")
sqldf("SELECT * FROM acs")
q1<-sqldf("select * from acs where AGEP < 50 and pwgtp1")
q2<-sqldf("select * from acs")
q3<-sqldf("select pwgtp1 from acs")
q4<-sqldf("select pwgtp1 from acs where AGEP < 50")
q1
q4
q4
sqldf("select distinct AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select unique * from acs")
sqldf("select distinct pwgtp1 from acs")
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
require(httr)
require(XML)
htmlCode <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content <- content(htmlCode, as="text")
htmlParsed <- htmlParse(content, asText=TRUE)
install.packages("xml")
require(XML)
htmlParsed <- htmlParse(content, asText=TRUE)
library("xml")
library(XML)
require(httr)
require(XML)
install.packages("XML")
require(httr)
require(XML)
htmlCode <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content <- content(htmlCode, as="text")
htmlParsed <- htmlParse(content, asText=TRUE)
xpathSApply(htmlParsed, "//title", xmlValue)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
?fwf
?read.fwf
sum(d[, 4])
library(ggplot2)
library(knitr)
library(caret)
library(caret)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
install.packages("rattle")
install.packages("rattle")
library(randomForest)
install.packages("randomForest")
install.packages("corrplot")
Install.packages(Amelia)
install.packages(Amelia)
install.packages("Amelia")
install.packages("e1071")
install.packages("caret")
install.packages("Amelia")
install.packages("corrplot")
library("randomForest")
library("randomorest")
library("randomforest")
library("rf")
install.packages("rf")
install.packages("randomforest")
install.packages("randomForest")
install.packages("e1071")
install.packages("rpart.plot")
install.packages("webshots")
World Soccer Winners Interactive Plot
========================================================
author: Ishan Gajurel
date: 10/5/2017
autosize: true
Project Introduction
========================================================
- This project is aimed at creating an interactive plot to graphically view how many times each country has won the (Soccer) World Cup Finals which occurs every 4 years.
- The data for this project has been manually created as a data frame with the information such as Name of Country, Country Code, Number of times as a Winner.
- The plot lets user to hover over different countries to see the number of wins for that country as well as a color coding to view the relative magnitude for each country regarding win count.
PLot
========================================================
```{r, echo=FALSE}
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
wc.winners <- df[,c(1,3)]
wc.winners
wc.winners$Number_Of_Wins <-
ifelse(wc.winners$COUNTRY=="Argentina",2,
ifelse(wc.winners$COUNTRY=="Brazil",5,
ifelse(wc.winners$COUNTRY=="United Kingdom",1,
ifelse(wc.winners$COUNTRY=="France",1,
ifelse(wc.winners$COUNTRY=="Germany",4,
ifelse(wc.winners$COUNTRY=="Italy",4,
ifelse(wc.winners$COUNTRY=="Spain",1,
ifelse(wc.winners$COUNTRY=="Uruguay",2,0))))))))
wc.winners[wc.winners$Number_Of_Wins>0,]
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(wc.winners) %>%
add_trace(
z = ~Number_Of_Wins, color = ~Number_Of_Wins, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Number of Wins in Final') %>%
layout(
title = 'World Cup Winners of All Time',
geo = g
)
p
```
World Soccer Winners Interactive Plot
========================================================
author: Ishan Gajurel
date: 10/5/2017
autosize: true
Project Introduction
========================================================
- This project is aimed at creating an interactive plot to graphically view how many times each country has won the (Soccer) World Cup Finals which occurs every 4 years.
- The data for this project has been manually created as a data frame with the information such as Name of Country, Country Code, Number of times as a Winner.
- The plot lets user to hover over different countries to see the number of wins for that country as well as a color coding to view the relative magnitude for each country regarding win count.
PLot
========================================================
```{r, echo=FALSE}
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
wc.winners <- df[,c(1,3)]
wc.winners
wc.winners$Number_Of_Wins <-
ifelse(wc.winners$COUNTRY=="Argentina",2,
ifelse(wc.winners$COUNTRY=="Brazil",5,
ifelse(wc.winners$COUNTRY=="United Kingdom",1,
ifelse(wc.winners$COUNTRY=="France",1,
ifelse(wc.winners$COUNTRY=="Germany",4,
ifelse(wc.winners$COUNTRY=="Italy",4,
ifelse(wc.winners$COUNTRY=="Spain",1,
ifelse(wc.winners$COUNTRY=="Uruguay",2,0))))))))
wc.winners[wc.winners$Number_Of_Wins>0,]
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(wc.winners) %>%
add_trace(
z = ~Number_Of_Wins, color = ~Number_Of_Wins, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Number of Wins in Final') %>%
layout(
title = 'World Cup Winners of All Time',
geo = g
)
p
```
World Soccer Winners Interactive Plot
========================================================
author: Ishan Gajurel
date: 10/5/2017
autosize: true
Project Introduction
========================================================
- This project is aimed at creating an interactive plot to graphically view how many times each country has won the (Soccer) World Cup Finals which occurs every 4 years.
- The data for this project has been manually created as a data frame with the information such as Name of Country, Country Code, Number of times as a Winner.
- The plot lets user to hover over different countries to see the number of wins for that country as well as a color coding to view the relative magnitude for each country regarding win count.
PLot
========================================================
```{r, echo=FALSE}
library(plotly)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
wc.winners <- df[,c(1,3)]
wc.winners$Number_Of_Wins <-
ifelse(wc.winners$COUNTRY=="Argentina",2,
ifelse(wc.winners$COUNTRY=="Brazil",5,
ifelse(wc.winners$COUNTRY=="United Kingdom",1,
ifelse(wc.winners$COUNTRY=="France",1,
ifelse(wc.winners$COUNTRY=="Germany",4,
ifelse(wc.winners$COUNTRY=="Italy",4,
ifelse(wc.winners$COUNTRY=="Spain",1,
ifelse(wc.winners$COUNTRY=="Uruguay",2,0))))))))
#wc.winners[wc.winners$Number_Of_Wins>0,]
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(wc.winners) %>%
add_trace(
z = ~Number_Of_Wins, color = ~Number_Of_Wins, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Number of Wins in Final') %>%
layout(
title = 'World Cup Winners of All Time',
geo = g
)
p
```
webshot::install_phantomjs()
webshot::install_phantomjs()
install.packages("webshot")
shiny::runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
faithful
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/test1')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
?textInput
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
?dateInput
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
?dateRangeInput
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
?numericInput
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
?verbatimTextOutput
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
runApp('C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera/HealthScore')
getwd()
setwd("C:/Users/GajjuVai/Desktop/ShinyApp_for_Coursera")
getwd()
runApp('HealthScore')
